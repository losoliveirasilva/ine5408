#ifndef STRUCTURES_LINKED_LIST_H
#define STRUCTURES_LINKED_LIST_H

#include <cstdint>
#include <stdexcept>


namespace structures {

template<typename T>
//! Lista Encadeada
/*!
    Lista encadeada
*/
class LinkedList {
public:
    //! Construtor
    /*!
        Construtor
    */
    LinkedList(){
        head = nullptr;
        size_ = 0;
    }

    //! Destrutor
    /*!
        Destroi
    */
    ~LinkedList(){
        clear();
    }

    //! Limpa
    /*!
        Limpa
    */
    void clear(){
        Node *atual, *anterior;
        atual = head;
        head = nullptr;
        
        while(atual != nullptr){
            anterior = atual;
            atual = atual->next();
            delete anterior;
        }

        size_ = 0;
    }

    //! Insere na última posição
    /*!
        \param data Dado a ser inserido
    */    
    void push_back(const T& data){
        insert(data, size_);
    }

    //! Insere na primeira posição
    /*!
        \param data Dado a ser inserido
    */
    void push_front(const T& data){
        Node *newone;
        newone = new Node(data);
        if(newone == nullptr){
            throw std::out_of_range("Erro de alocação");
        }else{
            newone->next(head);
            head = newone;
            ++size_;
        }
    }
    
    //! Insere
    /*!
        \param data Dado a ser inserido
        \param index Local a ser inserido
    */
    void insert(const T& data, std::size_t index){
        Node *prev, *newone;
        if(index > size_)
            throw std::out_of_range("Posição inválida");
        else if(index == 0)
            push_front(data);
        else{
            newone = new Node(data);
            if(newone == nullptr)
                throw std::out_of_range("Erro de alocação");
            else{
                prev = head;
                for(int i = 0; i < index -1; ++i){
                    prev = prev->next();
                }
                newone->next(prev->next());
                prev->next(newone);
                ++size_;
            }
        }
    }

    //! Insere ordenado
    /*!
        \param data a ser inserido
    */
    void insert_sorted(const T& data){
        Node *node;
        int pos = 0;
        if(empty())
            return(push_front(data));
        
        node = head;
        while(node->next() != nullptr && data > node->data()){
            node = node->next();
            ++pos;
        }

        if(data > node->data())
            return(insert(data, pos+1));
        
        return(insert(data, pos));
    }

    //! At
    /*!
        \param index Posição do elemento
        \return Elemento na posição index
    */
    T& at(std::size_t index){
        if(index < 0)
            throw std::out_of_range("Posição inválida");

        Node *ret = head;
        for(int i = 0; i < index; ++i){
            if(ret->next() == nullptr)
                throw std::out_of_range("Posição inválida");
            ret = ret->next();
        }
        return ret->data();
    }
    
    //! Retira na posição
    /*!
        \param index posição
        \return O elemento na posição
    */
    T pop(std::size_t index){
        if(empty())
            throw std::out_of_range("Lista vazia");
        if(index >= size_)
            throw std::out_of_range("Indice inválido");
        if(index == 0)
            return pop_front();

        Node *n = head;
        Node *exit;
        for(int i = 0; i < index - 1; ++i){
            n = n->next();
        }
        exit = n->next();
        n->next(exit->next());
        T data = exit->data();
        --size_;
        delete exit;
        return data;

    }

    //! Retira do fim
    /*!
        \return O elemento da última posição
    */
    T pop_back(){
        return pop(size_ - 1);
    }

    //! Retira do início
    /*!
        \return O elemento da primeira posição
    */
    T pop_front(){
        if(empty())
            throw std::out_of_range("Lista vazia");
        Node *n;
        n = head;
        T ret = n->data();
        head = n->next();
        --size_;
        delete n;
        return ret;
    }
    
    //! Remover
    /*!
        \param data Elemento a ser removido
    */
    void remove(const T& data){
        pop(find(data));
    }

    //! Vazia
    /*!
        \return true se a lista estiver vazia
    */
    bool empty() const{
        return (size_ == 0);
    }
    
    //! Contém
    /*!
        \param data elemento a ser encontrado
        \return true se a lista contém data
    */
    bool contains(const T& data) const{
        Node *n = head;
        while(n != nullptr){
            if(n->data() == data)
                return true;
            n = n->next();
        }
        return false;
    }

    //! Encontrar
    /*!
        \param data elemento a ser encontrado
        \return posição do data
    */
    std::size_t find(const T& data) const{
        if(empty())
            return -1;

        Node *n = head;
        std::size_t p = 0;
        
        while(n->data() != data){
            n = n->next();
            ++p;
            if(n == nullptr)
                return p;
        }
        return p;
    }

    //! Tamanho
    /*!
        \return tamanho da lista
    */
    std::size_t size() const{
        return size_;
    }
private:
    class Node { // Elemento
    public:
        Node(const T& data):
            data_{data}
        {}

        Node(const T& data, Node* next):
            data_{data},
            next_{next}
        {}

        T& data() { // getter: dado
            return data_;
        }

        const T& data() const { // getter const: dado
            return data_;
        }

        Node* next() { // getter: próximo
            return next_;
        }

        const Node* next() const { // getter const: próximo
            return next_;
        }

        void next(Node* node) { // setter: próximo
            next_ = node;
        }
    private:
        T data_;
        Node* next_{nullptr};
    };

    Node* end() { // último nodo da lista
        auto it = head;
        for (auto i = 1u; i < size(); ++i) {
            it = it->next();
        }
        return it;
    }

    Node* head{nullptr};
    std::size_t size_{0u};
};

}

#endif

